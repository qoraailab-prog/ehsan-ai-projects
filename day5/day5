# Student Manager - Enhanced Version with Unique ID, First/Last Name, and Major
# Comments inside the code are in English (inline)
# Requirements: pandas, openpyxl
# Install once if missing: pip install pandas openpyxl

import os
import sys
import subprocess

# Try to import pandas, otherwise show a helpful message and exit
try:
    import pandas as pd
except ImportError:
    print("Missing required module 'pandas'. Please run: pip install pandas openpyxl")
    sys.exit(1)

FILE_NAME = "students.xlsx"


# -------------------------
# Helper validation functions
# -------------------------
def has_alpha(text: str) -> bool:
    """Return True if text contains at least one alphabetic character."""
    return any(ch.isalpha() for ch in text)


def input_non_numeric(prompt: str) -> str:
    """
    Prompt user until they enter a non-empty value that contains at least one letter.
    This prevents names/majors that are only numbers.
    """
    while True:
        val = input(prompt).strip()
        if not val:
            print("Input cannot be empty. Please try again.")
            continue
        if not has_alpha(val):
            print("Invalid input: please include letters (not only numbers).")
            continue
        return val


def input_non_numeric_optional(prompt: str, default: str) -> str:
    """
    Prompt user for optional input. If user presses Enter, return default.
    Otherwise validate that the new input contains letters.
    """
    val = input(prompt).strip()
    if val == "":
        return default
    if not has_alpha(val):
        print("Invalid input: must include letters. Keeping previous value.")
        return default
    return val


def input_positive_int(prompt: str) -> int:
    """Prompt user until they enter a positive integer (> 0)."""
    while True:
        val = input(prompt).strip()
        try:
            n = int(val)
            if n > 0:
                return n
            else:
                print("Please enter a positive integer greater than 0.")
        except ValueError:
            print("Invalid integer. Please try again.")


def input_positive_int_optional(prompt: str, default: int) -> int:
    """
    Optional positive integer input: if user presses Enter, return default.
    Otherwise validate and return new positive integer.
    """
    val = input(prompt).strip()
    if val == "":
        return default
    try:
        n = int(val)
        if n > 0:
            return n
        else:
            print("Invalid input. Keeping previous value.")
            return default
    except ValueError:
        print("Invalid integer. Keeping previous value.")
        return default


def input_unique_id(prompt: str, existing_ids) -> str:
    """
    Prompt user for a unique 10-digit student ID number.
    Rejects duplicates and invalid formats.
    """
    while True:
        val = input(prompt).strip()
        if len(val) != 10 or not val.isdigit():
            print("Invalid ID: must be exactly 10 digits.")
            continue
        if val in existing_ids:
            print("This ID number already exists. Please enter a different one.")
            continue
        return val


def input_unique_id_optional(prompt: str, existing_ids, current_id: str) -> str:
    """
    Optional input for unique ID (for editing). 
    Keeps current ID if Enter is pressed.
    """
    val = input(prompt).strip()
    if val == "":
        return current_id
    if len(val) != 10 or not val.isdigit():
        print("Invalid ID: must be exactly 10 digits. Keeping previous value.")
        return current_id
    if val in existing_ids and val != current_id:
        print("This ID already exists. Keeping previous value.")
        return current_id
    return val


# -------------------------
# File / Data helpers
# -------------------------
def load_dataframe() -> pd.DataFrame:
    """
    Load existing Excel file if present, otherwise return empty DataFrame
    with the required columns.
    """
    if os.path.exists(FILE_NAME):
        try:
            df = pd.read_excel(FILE_NAME, engine="openpyxl")
            # Ensure required columns exist
            required_cols = ["First Name", "Last Name", "Age", "City", "ID Number", "Major"]
            for col in required_cols:
                if col not in df.columns:
                    df[col] = ""
            df["Age"] = pd.to_numeric(df["Age"], errors="coerce").fillna(0).astype(int)
            df = df[required_cols]  # reorder columns
            return df
        except Exception as e:
            print(f"Warning: could not read '{FILE_NAME}': {e}")
            return pd.DataFrame(columns=["First Name", "Last Name", "Age", "City", "ID Number", "Major"])
    else:
        return pd.DataFrame(columns=["First Name", "Last Name", "Age", "City", "ID Number", "Major"])


def save_dataframe(df: pd.DataFrame):
    """Save DataFrame to Excel file (overwrite)."""
    try:
        df["Age"] = pd.to_numeric(df["Age"], errors="coerce").fillna(0).astype(int)
        df.to_excel(FILE_NAME, index=False, engine="openpyxl")
        print(f"\nüíæ Data saved to '{FILE_NAME}'.")
    except Exception as e:
        print(f"Error saving file: {e}")


def open_file_with_default_app(path: str):
    """Try to open a file with the system default application (cross-platform)."""
    try:
        if os.name == "nt":              # Windows
            os.startfile(path)
        elif sys.platform == "darwin":   # macOS
            subprocess.run(["open", path])
        else:                            # Linux variants
            subprocess.run(["xdg-open", path])
    except Exception as e:
        print(f"Could not open file automatically: {e}")


def display_students(df: pd.DataFrame):
    """Print a nicely formatted student list with ID column."""
    if df.empty:
        print("\n( No students in database )")
        return
    print("\nüìñ Student List:")
    print("{:<5} {:<12} {:<12} {:<6} {:<15} {:<12} {:<15}".format(
        "ID", "First Name", "Last Name", "Age", "City", "ID Number", "Major"))
    print("-" * 80)
    display_df = df.reset_index(drop=True)
    for i, row in display_df.iterrows():
        print("{:<5} {:<12} {:<12} {:<6} {:<15} {:<12} {:<15}".format(
            i + 1,
            str(row["First Name"]),
            str(row["Last Name"]),
            str(row["Age"]),
            str(row["City"]),
            str(row["ID Number"]),
            str(row["Major"])
        ))
    print("-" * 80)


# -------------------------
# CRUD operations
# -------------------------
def add_students(df: pd.DataFrame) -> pd.DataFrame:
    """Add one or more students with validation, return updated DataFrame."""
    count = input_positive_int("How many students to add? ")
    new_rows = []
    for i in range(count):
        print(f"\nStudent #{i + 1}:")
        first_name = input_non_numeric("First Name: ")
        last_name = input_non_numeric("Last Name: ")
        age = input_positive_int("Age: ")
        city = input_non_numeric("City: ")
        id_number = input_unique_id("ID Number (10 digits): ", df["ID Number"].astype(str).tolist())
        major = input_non_numeric("Major: ")
        new_rows.append([first_name, last_name, age, city, id_number, major])
    if new_rows:
        new_df = pd.DataFrame(new_rows, columns=df.columns)
        df = pd.concat([df, new_df], ignore_index=True)
    print(f"\n‚úÖ {count} student(s) added.")
    return df


def edit_student(df: pd.DataFrame) -> pd.DataFrame:
    """Edit a student by ID with validation and optional fields."""
    if df.empty:
        print("\nNo students to edit.")
        return df
    display_students(df)
    idx = input_positive_int("Enter ID of student to edit: ") - 1
    if idx < 0 or idx >= len(df):
        print("Invalid ID.")
        return df

    curr = df.loc[idx]

    new_first = input_non_numeric_optional(f"New First Name (Enter to keep '{curr['First Name']}'): ", curr['First Name'])
    new_last = input_non_numeric_optional(f"New Last Name (Enter to keep '{curr['Last Name']}'): ", curr['Last Name'])
    new_age = input_positive_int_optional(f"New Age (Enter to keep '{curr['Age']}'): ", curr['Age'])
    new_city = input_non_numeric_optional(f"New City (Enter to keep '{curr['City']}'): ", curr['City'])
    new_id = input_unique_id_optional(f"New ID Number (Enter to keep '{curr['ID Number']}'): ",
                                      df["ID Number"].astype(str).tolist(),
                                      str(curr["ID Number"]))
    new_major = input_non_numeric_optional(f"New Major (Enter to keep '{curr['Major']}'): ", curr['Major'])

    df.loc[idx] = [new_first, new_last, new_age, new_city, new_id, new_major]
    print("‚úÖ Student updated.")
    return df


def delete_student(df: pd.DataFrame) -> pd.DataFrame:
    """Delete a student by ID after confirmation."""
    if df.empty:
        print("\nNo students to delete.")
        return df
    display_students(df)
    idx = input_positive_int("Enter ID of student to delete: ") - 1
    if idx < 0 or idx >= len(df):
        print("Invalid ID.")
        return df
    confirm = input(f"Are you sure you want to delete '{df.at[idx, 'First Name']} {df.at[idx, 'Last Name']}'? (y/n): ").strip().lower()
    if confirm == "y":
        df = df.drop(df.index[idx]).reset_index(drop=True)
        print("üóëÔ∏è Student deleted.")
    else:
        print("Deletion canceled.")
    return df


def search_by_name(df: pd.DataFrame):
    """Search students by first or last name (case-insensitive substring)."""
    if df.empty:
        print("\nNo students to search.")
        return
    term = input_non_numeric("Enter name to search: ")
    mask = (df["First Name"].astype(str).str.contains(term, case=False, na=False)) | \
           (df["Last Name"].astype(str).str.contains(term, case=False, na=False))
    result = df[mask].reset_index(drop=True)
    if result.empty:
        print("No matching students found.")
    else:
        display_students(result)


def sort_by_age(df: pd.DataFrame) -> pd.DataFrame:
    """Sort DataFrame by Age ascending or descending."""
    if df.empty:
        print("\nNo students to sort.")
        return df
    order = input("Sort by age: (a)scending or (d)escending? (a/d): ").strip().lower()
    df = df.sort_values(by="Age", ascending=(order != "d")).reset_index(drop=True)
    print("‚úÖ Sorted by age.")
    return df


# -------------------------
# Main program loop
# -------------------------
def main():
    df = load_dataframe()

    while True:
        print("\n===== üéì Student Manager =====")
        print("1. Add Student(s)")
        print("2. View All Students")
        print("3. Search by Name")
        print("4. Sort by Age")
        print("5. Edit Student")
        print("6. Delete Student")
        print("7. Save and Open Excel")
        print("8. Exit (Save and Quit)")

        choice = input("Choose an option (1-8): ").strip()

        if choice == "1":
            df = add_students(df)
        elif choice == "2":
            display_students(df)
        elif choice == "3":
            search_by_name(df)
        elif choice == "4":
            df = sort_by_age(df)
        elif choice == "5":
            df = edit_student(df)
        elif choice == "6":
            df = delete_student(df)
        elif choice == "7":
            save_dataframe(df)
            open_file_with_default_app(FILE_NAME)
        elif choice == "8":
            save_dataframe(df)
            open_file_with_default_app(FILE_NAME)
            print("üëã Program ended. Goodbye!")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 8.")


if __name__ == "__main__":
    main()
